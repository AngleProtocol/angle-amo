{
  "version": "3.4",
  "log": [
    {
      "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol:AggregatorV3Interface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "decimals()",
          "description()",
          "version()",
          "getRoundData(uint80)",
          "latestRoundData()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        }
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "ae681e670c62af52eb6f74d72d2398ad19105f5fc6a1cc14baffcaa814957f11",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        }
      },
      "@openzeppelin/contracts/interfaces/IERC3156FlashBorrower.sol:IERC3156FlashBorrower": {
        "src": "@openzeppelin/contracts/interfaces/IERC3156FlashBorrower.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onFlashLoan(address,address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts/interfaces/IERC3156FlashLender.sol:IERC3156FlashLender": {
        "src": "@openzeppelin/contracts/interfaces/IERC3156FlashLender.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "maxFlashLoan(address)",
          "flashFee(address,uint256)",
          "flashLoan(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:IERC1822Proxiable": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:ERC1967Proxy": {
        "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:15",
        "version": {
          "withMetadata": "38cd17deea0709ce7f84b6ffad5839d36e693bec2f27d9792404639d0792369d",
          "withoutMetadata": "38cd17deea0709ce7f84b6ffad5839d36e693bec2f27d9792404639d0792369d",
          "linkedWithoutMetadata": "38cd17deea0709ce7f84b6ffad5839d36e693bec2f27d9792404639d0792369d"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade",
          "@openzeppelin/contracts/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC1967Proxy",
            "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:22"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:191"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade": {
        "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:19",
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/StorageSlot.sol:StorageSlot",
          "@openzeppelin/contracts/utils/Address.sol:Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:191"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:191"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:191"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts/proxy/Proxy.sol:Proxy": {
        "src": "@openzeppelin/contracts/proxy/Proxy.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:IBeacon": {
        "src": "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "893d4c00be6337e5d93c30a401fffc405b0f733d457f61a1de40fd6a4f90eae5",
          "withoutMetadata": "b5323634437d360189973ed7158d67ef79c1339fa7a7da5a29776cc6596f7ef7",
          "linkedWithoutMetadata": "b5323634437d360189973ed7158d67ef79c1339fa7a7da5a29776cc6596f7ef7"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        }
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:ERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:22",
        "inherit": [
          "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:EIP712",
          "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:IERC20Permit",
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Counters.sol:Counters",
          "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:ECDSA"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Permit",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "label": "_nonces",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_struct(Counter)2619_storage)",
              "contract": "ERC20Permit",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:25"
            },
            {
              "label": "_PERMIT_TYPEHASH_DEPRECATED_SLOT",
              "offset": 0,
              "slot": "6",
              "type": "t_bytes32",
              "contract": "ERC20Permit",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:37",
              "renamedFrom": "_PERMIT_TYPEHASH"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Counter)2619_storage)": {
              "label": "mapping(address => struct Counters.Counter)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Counter)2619_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        }
      },
      "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:19",
        "version": {
          "withMetadata": "bf9123ad6158c0ac57574cd6fd7aaa48211b363bd85f6557fd0f11a822d86335",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "bf85050a22ff6a6265b56cf5a603915f9ef1c7581c71a5b94732fb0a29a82583",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:191"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:191"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts/utils/Counters.sol:Counters": {
        "src": "@openzeppelin/contracts/utils/Counters.sol:14",
        "version": {
          "withMetadata": "1fadc2dc3395d9c7d2bc5b078674fa8a3413b2d7b07c4098da4c773f780b7eb2",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts/utils/StorageSlot.sol:StorageSlot": {
        "src": "@openzeppelin/contracts/utils/StorageSlot.sol:32",
        "version": {
          "withMetadata": "2361dad7c8592d4c273eb753bd579e2c0a64f2923ae12408c9f1df81d1e8b33c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:9",
        "version": {
          "withMetadata": "69705d02a7cd21c097198c03561277951a74d45f8d361dcda1a3cea7cde19001",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:ECDSA": {
        "src": "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:14",
        "version": {
          "withMetadata": "1acf8b3c16cd7b5e403e99b095519559ce9012b159125c7e5434483cdb3e7794",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:EIP712": {
        "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:27",
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:ECDSA"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EIP712",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:53"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_DOMAIN_SEPARATOR",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:31"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_CHAIN_ID",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:32"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_THIS",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:33"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_NAME",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:35"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_VERSION",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:36"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_TYPE_HASH",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:37"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "contracts/AMOs/BaseAMO.sol:BaseAMO": {
        "src": "contracts/AMOs/BaseAMO.sol:11",
        "inherit": [
          "contracts/interfaces/IAMO.sol:IAMO",
          "contracts/AMOs/BaseAMOStorage.sol:BaseAMOStorage",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [
          "balance(address)",
          "debt(address)",
          "getNavOfInvestedAssets(address)",
          "pushSurplus(address,address,bytes[])",
          "claimRewards(contract IERC20[])",
          "sellRewards(uint256,bytes)",
          "changeAllowance(contract IERC20[],address[],uint256[])",
          "recoverERC20(address,address,uint256)",
          "execute(address,bytes)",
          "pull(contract IERC20[],uint256[],bytes[])",
          "push(contract IERC20[],uint256[],bytes[])",
          "setAMOMinter(address)",
          "setToken(address)",
          "removeToken(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "amoMinter",
              "offset": 2,
              "slot": "0",
              "type": "t_contract(IAMOMinter)10025",
              "contract": "BaseAMOStorage",
              "src": "contracts/AMOs/BaseAMOStorage.sol:23"
            },
            {
              "label": "lastBalances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_contract(IERC20)1782,t_uint256)",
              "contract": "BaseAMOStorage",
              "src": "contracts/AMOs/BaseAMOStorage.sol:29"
            },
            {
              "label": "protocolDebts",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_contract(IERC20)1782,t_uint256)",
              "contract": "BaseAMOStorage",
              "src": "contracts/AMOs/BaseAMOStorage.sol:31"
            },
            {
              "label": "protocolGains",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_contract(IERC20)1782,t_uint256)",
              "contract": "BaseAMOStorage",
              "src": "contracts/AMOs/BaseAMOStorage.sol:33"
            },
            {
              "label": "__gapStorage",
              "offset": 0,
              "slot": "4",
              "type": "t_array(t_uint256)46_storage",
              "contract": "BaseAMOStorage",
              "src": "contracts/AMOs/BaseAMOStorage.sol:35"
            }
          ],
          "types": {
            "t_array(t_uint256)46_storage": {
              "label": "uint256[46]",
              "numberOfBytes": "1472"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IAMOMinter)10025": {
              "label": "contract IAMOMinter",
              "numberOfBytes": "20"
            },
            "t_contract(IERC20)1782": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_contract(IERC20)1782,t_uint256)": {
              "label": "mapping(contract IERC20 => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        }
      },
      "contracts/AMOs/BaseAMOStorage.sol:BaseAMOStorage": {
        "src": "contracts/AMOs/BaseAMOStorage.sol:14",
        "version": {
          "withMetadata": "4bf8b8824ed1b475fb74c8f519a910b1a7057e4e28cefafb3c9a121176231f72",
          "withoutMetadata": "15c73680e20d985d054c63717ba0ead7d99a3368a861fafca5c82cc8faf70c8a",
          "linkedWithoutMetadata": "15c73680e20d985d054c63717ba0ead7d99a3368a861fafca5c82cc8faf70c8a"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "amoMinter",
              "offset": 2,
              "slot": "0",
              "type": "t_contract(IAMOMinter)10025",
              "contract": "BaseAMOStorage",
              "src": "contracts/AMOs/BaseAMOStorage.sol:23"
            },
            {
              "label": "lastBalances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_contract(IERC20)1782,t_uint256)",
              "contract": "BaseAMOStorage",
              "src": "contracts/AMOs/BaseAMOStorage.sol:29"
            },
            {
              "label": "protocolDebts",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_contract(IERC20)1782,t_uint256)",
              "contract": "BaseAMOStorage",
              "src": "contracts/AMOs/BaseAMOStorage.sol:31"
            },
            {
              "label": "protocolGains",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_contract(IERC20)1782,t_uint256)",
              "contract": "BaseAMOStorage",
              "src": "contracts/AMOs/BaseAMOStorage.sol:33"
            },
            {
              "label": "__gapStorage",
              "offset": 0,
              "slot": "4",
              "type": "t_array(t_uint256)46_storage",
              "contract": "BaseAMOStorage",
              "src": "contracts/AMOs/BaseAMOStorage.sol:35"
            }
          ],
          "types": {
            "t_array(t_uint256)46_storage": {
              "label": "uint256[46]",
              "numberOfBytes": "1472"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IAMOMinter)10025": {
              "label": "contract IAMOMinter",
              "numberOfBytes": "20"
            },
            "t_contract(IERC20)1782": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_contract(IERC20)1782,t_uint256)": {
              "label": "mapping(contract IERC20 => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        }
      },
      "contracts/AMOs/implementations/EulerAMO.sol:EulerAMO": {
        "src": "contracts/AMOs/implementations/EulerAMO.sol:12",
        "version": {
          "withMetadata": "692d5549fd1f89862dac064ca07f7691b97dc45d860adbc385dd62dddfc43624",
          "withoutMetadata": "6b6907cb4fa5986317e9b8cf2fa443cca67ee32a4144be5352e8967f60fa4dd1",
          "linkedWithoutMetadata": "6b6907cb4fa5986317e9b8cf2fa443cca67ee32a4144be5352e8967f60fa4dd1"
        },
        "inherit": [
          "contracts/AMOs/BaseAMO.sol:BaseAMO",
          "contracts/interfaces/IAMO.sol:IAMO",
          "contracts/AMOs/BaseAMOStorage.sol:BaseAMOStorage",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [
          "initialize(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "amoMinter",
              "offset": 2,
              "slot": "0",
              "type": "t_contract(IAMOMinter)10025",
              "contract": "BaseAMOStorage",
              "src": "contracts/AMOs/BaseAMOStorage.sol:23"
            },
            {
              "label": "lastBalances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_contract(IERC20)1782,t_uint256)",
              "contract": "BaseAMOStorage",
              "src": "contracts/AMOs/BaseAMOStorage.sol:29"
            },
            {
              "label": "protocolDebts",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_contract(IERC20)1782,t_uint256)",
              "contract": "BaseAMOStorage",
              "src": "contracts/AMOs/BaseAMOStorage.sol:31"
            },
            {
              "label": "protocolGains",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_contract(IERC20)1782,t_uint256)",
              "contract": "BaseAMOStorage",
              "src": "contracts/AMOs/BaseAMOStorage.sol:33"
            },
            {
              "label": "__gapStorage",
              "offset": 0,
              "slot": "4",
              "type": "t_array(t_uint256)46_storage",
              "contract": "BaseAMOStorage",
              "src": "contracts/AMOs/BaseAMOStorage.sol:35"
            },
            {
              "label": "tokensAddresses",
              "offset": 0,
              "slot": "50",
              "type": "t_mapping(t_contract(IERC20)1782,t_struct(EulerAddresses)4418_storage)",
              "contract": "EulerAMO",
              "src": "contracts/AMOs/implementations/EulerAMO.sol:28"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "EulerAMO",
              "src": "contracts/AMOs/implementations/EulerAMO.sol:30"
            }
          ],
          "types": {
            "t_array(t_uint256)46_storage": {
              "label": "uint256[46]",
              "numberOfBytes": "1472"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IAMOMinter)10025": {
              "label": "contract IAMOMinter",
              "numberOfBytes": "20"
            },
            "t_contract(IERC20)1782": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_contract(IEulerDToken)13376": {
              "label": "contract IEulerDToken",
              "numberOfBytes": "20"
            },
            "t_contract(IEulerEToken)13289": {
              "label": "contract IEulerEToken",
              "numberOfBytes": "20"
            },
            "t_mapping(t_contract(IERC20)1782,t_struct(EulerAddresses)4418_storage)": {
              "label": "mapping(contract IERC20 => struct EulerAMO.EulerAddresses)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_contract(IERC20)1782,t_uint256)": {
              "label": "mapping(contract IERC20 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(EulerAddresses)4418_storage": {
              "label": "struct EulerAMO.EulerAddresses",
              "members": [
                {
                  "label": "eToken",
                  "type": "t_contract(IEulerEToken)13289",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "dToken",
                  "type": "t_contract(IEulerDToken)13376",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        }
      },
      "contracts/AMOs/implementations/aave/AaveAMO.sol:AaveAMO": {
        "src": "contracts/AMOs/implementations/aave/AaveAMO.sol:18",
        "version": {
          "withMetadata": "602d67206e04a24170370afd6e85c24642796df09f288b88a754d58abc67bff8",
          "withoutMetadata": "6bb4e43e28c3c5b5984f706aa67e4b45b7512f1f66c00ea9e33f9ba5cfba1324",
          "linkedWithoutMetadata": "6bb4e43e28c3c5b5984f706aa67e4b45b7512f1f66c00ea9e33f9ba5cfba1324"
        },
        "inherit": [
          "contracts/AMOs/BaseAMO.sol:BaseAMO",
          "contracts/interfaces/IAMO.sol:IAMO",
          "contracts/AMOs/BaseAMOStorage.sol:BaseAMOStorage",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20",
          "contracts/AMOs/implementations/aave/FlashMintLib.sol:FlashMintLib"
        ],
        "methods": [
          "initialize(address)",
          "setAavePoolVariables()",
          "setAaveTokenLiqThreshold(contract IERC20[])",
          "unfold(address[],uint256[])",
          "fold(address[],uint256[])",
          "onFlashLoan(address,address,uint256,uint256,bytes)",
          "toggleLiquidationCheck()",
          "setLiquidationWarningThreshold(uint256)",
          "cooldown()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "amoMinter",
              "offset": 2,
              "slot": "0",
              "type": "t_contract(IAMOMinter)10025",
              "contract": "BaseAMOStorage",
              "src": "contracts/AMOs/BaseAMOStorage.sol:23"
            },
            {
              "label": "lastBalances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_contract(IERC20)1782,t_uint256)",
              "contract": "BaseAMOStorage",
              "src": "contracts/AMOs/BaseAMOStorage.sol:29"
            },
            {
              "label": "protocolDebts",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_contract(IERC20)1782,t_uint256)",
              "contract": "BaseAMOStorage",
              "src": "contracts/AMOs/BaseAMOStorage.sol:31"
            },
            {
              "label": "protocolGains",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_contract(IERC20)1782,t_uint256)",
              "contract": "BaseAMOStorage",
              "src": "contracts/AMOs/BaseAMOStorage.sol:33"
            },
            {
              "label": "__gapStorage",
              "offset": 0,
              "slot": "4",
              "type": "t_array(t_uint256)46_storage",
              "contract": "BaseAMOStorage",
              "src": "contracts/AMOs/BaseAMOStorage.sol:35"
            },
            {
              "label": "activeTokenList",
              "offset": 0,
              "slot": "50",
              "type": "t_array(t_contract(IERC20)1782)dyn_storage",
              "contract": "AaveAMO",
              "src": "contracts/AMOs/implementations/aave/AaveAMO.sol:49"
            },
            {
              "label": "tokensParams",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_contract(IERC20)1782,t_struct(AaveTokenParams)4841_storage)",
              "contract": "AaveAMO",
              "src": "contracts/AMOs/implementations/aave/AaveAMO.sol:52"
            },
            {
              "label": "cooldownSeconds",
              "offset": 0,
              "slot": "52",
              "type": "t_uint256",
              "contract": "AaveAMO",
              "src": "contracts/AMOs/implementations/aave/AaveAMO.sol:54"
            },
            {
              "label": "unstakeWindow",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "AaveAMO",
              "src": "contracts/AMOs/implementations/aave/AaveAMO.sol:56"
            },
            {
              "label": "daiBorrowCollatRatio",
              "offset": 0,
              "slot": "54",
              "type": "t_uint256",
              "contract": "AaveAMO",
              "src": "contracts/AMOs/implementations/aave/AaveAMO.sol:58"
            },
            {
              "label": "liquidationCheck",
              "offset": 0,
              "slot": "55",
              "type": "t_bool",
              "contract": "AaveAMO",
              "src": "contracts/AMOs/implementations/aave/AaveAMO.sol:63"
            },
            {
              "label": "liquidationWarningThreshold",
              "offset": 0,
              "slot": "56",
              "type": "t_uint256",
              "contract": "AaveAMO",
              "src": "contracts/AMOs/implementations/aave/AaveAMO.sol:65"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "57",
              "type": "t_array(t_uint256)50_storage",
              "contract": "AaveAMO",
              "src": "contracts/AMOs/implementations/aave/AaveAMO.sol:73"
            }
          ],
          "types": {
            "t_array(t_contract(IERC20)1782)dyn_storage": {
              "label": "contract IERC20[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)46_storage": {
              "label": "uint256[46]",
              "numberOfBytes": "1472"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IAMOMinter)10025": {
              "label": "contract IAMOMinter",
              "numberOfBytes": "20"
            },
            "t_contract(IAToken)10673": {
              "label": "contract IAToken",
              "numberOfBytes": "20"
            },
            "t_contract(IERC20)1782": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_contract(IVariableDebtToken)10519": {
              "label": "contract IVariableDebtToken",
              "numberOfBytes": "20"
            },
            "t_mapping(t_contract(IERC20)1782,t_struct(AaveTokenParams)4841_storage)": {
              "label": "mapping(contract IERC20 => struct AaveAMO.AaveTokenParams)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_contract(IERC20)1782,t_uint256)": {
              "label": "mapping(contract IERC20 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(AaveTokenParams)4841_storage": {
              "label": "struct AaveAMO.AaveTokenParams",
              "members": [
                {
                  "label": "aToken",
                  "type": "t_contract(IAToken)10673",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "debtToken",
                  "type": "t_contract(IVariableDebtToken)10519",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "liquidationThreshold",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        }
      },
      "contracts/AMOs/implementations/aave/FlashMintLib.sol:FlashMintLib": {
        "src": "contracts/AMOs/implementations/aave/FlashMintLib.sol:13",
        "version": {
          "withMetadata": "d4cae7fd3e50ad1f0e3023db553e6ecaf19af116d1b5ace63c5a29f2a2c99c61",
          "withoutMetadata": "1dbda489b2ba0bbc6df6fb1cda3b0f094278a67c39c1bdcd8822c90775480dd3",
          "linkedWithoutMetadata": "1dbda489b2ba0bbc6df6fb1cda3b0f094278a67c39c1bdcd8822c90775480dd3"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "contracts/AMOs/implementations/convex/BPAMOs/ConvexAgEURvEUROCAMO.sol:ConvexAgEURvEUROCAMO": {
        "src": "contracts/AMOs/implementations/convex/BPAMOs/ConvexAgEURvEUROCAMO.sol:9",
        "version": {
          "withMetadata": "2a862707e9147f2503aef71d18f4ac3e8adbd04f4f28e819e3f960be47f25de5",
          "withoutMetadata": "4e5595e3cac3550d1314134e38dc2ad3011d5077a246e4fd6bdd1a444cbbe05f",
          "linkedWithoutMetadata": "4e5595e3cac3550d1314134e38dc2ad3011d5077a246e4fd6bdd1a444cbbe05f"
        },
        "inherit": [
          "contracts/AMOs/implementations/convex/ConvexBPAMO.sol:ConvexBPAMO",
          "contracts/AMOs/implementations/curve/BaseCurveBPAMO.sol:BaseCurveBPAMO",
          "contracts/AMOs/implementations/curve/BaseCurveAMO.sol:BaseCurveAMO",
          "contracts/AMOs/BaseAMO.sol:BaseAMO",
          "contracts/interfaces/IAMO.sol:IAMO",
          "contracts/AMOs/BaseAMOStorage.sol:BaseAMOStorage",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "amoMinter",
              "offset": 2,
              "slot": "0",
              "type": "t_contract(IAMOMinter)10025",
              "contract": "BaseAMOStorage",
              "src": "contracts/AMOs/BaseAMOStorage.sol:23"
            },
            {
              "label": "lastBalances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_contract(IERC20)1782,t_uint256)",
              "contract": "BaseAMOStorage",
              "src": "contracts/AMOs/BaseAMOStorage.sol:29"
            },
            {
              "label": "protocolDebts",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_contract(IERC20)1782,t_uint256)",
              "contract": "BaseAMOStorage",
              "src": "contracts/AMOs/BaseAMOStorage.sol:31"
            },
            {
              "label": "protocolGains",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_contract(IERC20)1782,t_uint256)",
              "contract": "BaseAMOStorage",
              "src": "contracts/AMOs/BaseAMOStorage.sol:33"
            },
            {
              "label": "__gapStorage",
              "offset": 0,
              "slot": "4",
              "type": "t_array(t_uint256)46_storage",
              "contract": "BaseAMOStorage",
              "src": "contracts/AMOs/BaseAMOStorage.sol:35"
            },
            {
              "label": "agToken",
              "offset": 0,
              "slot": "50",
              "type": "t_contract(IERC20)1782",
              "contract": "BaseCurveAMO",
              "src": "contracts/AMOs/implementations/curve/BaseCurveAMO.sol:14"
            },
            {
              "label": "mainPool",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "BaseCurveAMO",
              "src": "contracts/AMOs/implementations/curve/BaseCurveAMO.sol:16"
            },
            {
              "label": "__gapBaseCurveAMO",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)48_storage",
              "contract": "BaseCurveAMO",
              "src": "contracts/AMOs/implementations/curve/BaseCurveAMO.sol:18"
            },
            {
              "label": "__gapBaseCurveBPAMO",
              "offset": 0,
              "slot": "100",
              "type": "t_array(t_uint256)50_storage",
              "contract": "BaseCurveBPAMO",
              "src": "contracts/AMOs/implementations/curve/BaseCurveBPAMO.sol:16"
            },
            {
              "label": "__gapConvexBPAMO",
              "offset": 0,
              "slot": "150",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ConvexBPAMO",
              "src": "contracts/AMOs/implementations/convex/ConvexBPAMO.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)46_storage": {
              "label": "uint256[46]",
              "numberOfBytes": "1472"
            },
            "t_array(t_uint256)48_storage": {
              "label": "uint256[48]",
              "numberOfBytes": "1536"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IAMOMinter)10025": {
              "label": "contract IAMOMinter",
              "numberOfBytes": "20"
            },
            "t_contract(IERC20)1782": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_contract(IERC20)1782,t_uint256)": {
              "label": "mapping(contract IERC20 => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        }
      },
      "contracts/AMOs/implementations/convex/ConvexBPAMO.sol:ConvexBPAMO": {
        "src": "contracts/AMOs/implementations/convex/ConvexBPAMO.sol:16",
        "inherit": [
          "contracts/AMOs/implementations/curve/BaseCurveBPAMO.sol:BaseCurveBPAMO",
          "contracts/AMOs/implementations/curve/BaseCurveAMO.sol:BaseCurveAMO",
          "contracts/AMOs/BaseAMO.sol:BaseAMO",
          "contracts/interfaces/IAMO.sol:IAMO",
          "contracts/AMOs/BaseAMOStorage.sol:BaseAMOStorage",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "amoMinter",
              "offset": 2,
              "slot": "0",
              "type": "t_contract(IAMOMinter)10025",
              "contract": "BaseAMOStorage",
              "src": "contracts/AMOs/BaseAMOStorage.sol:23"
            },
            {
              "label": "lastBalances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_contract(IERC20)1782,t_uint256)",
              "contract": "BaseAMOStorage",
              "src": "contracts/AMOs/BaseAMOStorage.sol:29"
            },
            {
              "label": "protocolDebts",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_contract(IERC20)1782,t_uint256)",
              "contract": "BaseAMOStorage",
              "src": "contracts/AMOs/BaseAMOStorage.sol:31"
            },
            {
              "label": "protocolGains",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_contract(IERC20)1782,t_uint256)",
              "contract": "BaseAMOStorage",
              "src": "contracts/AMOs/BaseAMOStorage.sol:33"
            },
            {
              "label": "__gapStorage",
              "offset": 0,
              "slot": "4",
              "type": "t_array(t_uint256)46_storage",
              "contract": "BaseAMOStorage",
              "src": "contracts/AMOs/BaseAMOStorage.sol:35"
            },
            {
              "label": "agToken",
              "offset": 0,
              "slot": "50",
              "type": "t_contract(IERC20)1782",
              "contract": "BaseCurveAMO",
              "src": "contracts/AMOs/implementations/curve/BaseCurveAMO.sol:14"
            },
            {
              "label": "mainPool",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "BaseCurveAMO",
              "src": "contracts/AMOs/implementations/curve/BaseCurveAMO.sol:16"
            },
            {
              "label": "__gapBaseCurveAMO",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)48_storage",
              "contract": "BaseCurveAMO",
              "src": "contracts/AMOs/implementations/curve/BaseCurveAMO.sol:18"
            },
            {
              "label": "__gapBaseCurveBPAMO",
              "offset": 0,
              "slot": "100",
              "type": "t_array(t_uint256)50_storage",
              "contract": "BaseCurveBPAMO",
              "src": "contracts/AMOs/implementations/curve/BaseCurveBPAMO.sol:16"
            },
            {
              "label": "__gapConvexBPAMO",
              "offset": 0,
              "slot": "150",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ConvexBPAMO",
              "src": "contracts/AMOs/implementations/convex/ConvexBPAMO.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)46_storage": {
              "label": "uint256[46]",
              "numberOfBytes": "1472"
            },
            "t_array(t_uint256)48_storage": {
              "label": "uint256[48]",
              "numberOfBytes": "1536"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IAMOMinter)10025": {
              "label": "contract IAMOMinter",
              "numberOfBytes": "20"
            },
            "t_contract(IERC20)1782": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_contract(IERC20)1782,t_uint256)": {
              "label": "mapping(contract IERC20 => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        }
      },
      "contracts/AMOs/implementations/curve/BPAMOs/MultiStakerCurveAgEURvEUROCAMO.sol:MultiStakerCurveAgEURvEUROCAMO": {
        "src": "contracts/AMOs/implementations/curve/BPAMOs/MultiStakerCurveAgEURvEUROCAMO.sol:9",
        "version": {
          "withMetadata": "a40f8ac6a172542a3ad097a29343e66a01606bd374d8a84f76eabc1d06ea2ea0",
          "withoutMetadata": "197d6120072e71eee2c27ce6ae11094edf5f70715e61aa9e4ee6b171ff03a477",
          "linkedWithoutMetadata": "197d6120072e71eee2c27ce6ae11094edf5f70715e61aa9e4ee6b171ff03a477"
        },
        "inherit": [
          "contracts/AMOs/implementations/curve/MultiStakerCurveBPAMO.sol:MultiStakerCurveBPAMO",
          "contracts/AMOs/implementations/curve/BaseCurveBPAMO.sol:BaseCurveBPAMO",
          "contracts/AMOs/implementations/curve/BaseCurveAMO.sol:BaseCurveAMO",
          "contracts/AMOs/BaseAMO.sol:BaseAMO",
          "contracts/interfaces/IAMO.sol:IAMO",
          "contracts/AMOs/BaseAMOStorage.sol:BaseAMOStorage",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "amoMinter",
              "offset": 2,
              "slot": "0",
              "type": "t_contract(IAMOMinter)10025",
              "contract": "BaseAMOStorage",
              "src": "contracts/AMOs/BaseAMOStorage.sol:23"
            },
            {
              "label": "lastBalances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_contract(IERC20)1782,t_uint256)",
              "contract": "BaseAMOStorage",
              "src": "contracts/AMOs/BaseAMOStorage.sol:29"
            },
            {
              "label": "protocolDebts",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_contract(IERC20)1782,t_uint256)",
              "contract": "BaseAMOStorage",
              "src": "contracts/AMOs/BaseAMOStorage.sol:31"
            },
            {
              "label": "protocolGains",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_contract(IERC20)1782,t_uint256)",
              "contract": "BaseAMOStorage",
              "src": "contracts/AMOs/BaseAMOStorage.sol:33"
            },
            {
              "label": "__gapStorage",
              "offset": 0,
              "slot": "4",
              "type": "t_array(t_uint256)46_storage",
              "contract": "BaseAMOStorage",
              "src": "contracts/AMOs/BaseAMOStorage.sol:35"
            },
            {
              "label": "agToken",
              "offset": 0,
              "slot": "50",
              "type": "t_contract(IERC20)1782",
              "contract": "BaseCurveAMO",
              "src": "contracts/AMOs/implementations/curve/BaseCurveAMO.sol:14"
            },
            {
              "label": "mainPool",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "BaseCurveAMO",
              "src": "contracts/AMOs/implementations/curve/BaseCurveAMO.sol:16"
            },
            {
              "label": "__gapBaseCurveAMO",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)48_storage",
              "contract": "BaseCurveAMO",
              "src": "contracts/AMOs/implementations/curve/BaseCurveAMO.sol:18"
            },
            {
              "label": "__gapBaseCurveBPAMO",
              "offset": 0,
              "slot": "100",
              "type": "t_array(t_uint256)50_storage",
              "contract": "BaseCurveBPAMO",
              "src": "contracts/AMOs/implementations/curve/BaseCurveBPAMO.sol:16"
            },
            {
              "label": "stakeDAOProportion",
              "offset": 0,
              "slot": "150",
              "type": "t_uint256",
              "contract": "MultiStakerCurveBPAMO",
              "src": "contracts/AMOs/implementations/curve/MultiStakerCurveBPAMO.sol:25"
            },
            {
              "label": "__gapMultiStakerCurveBPAMO",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)49_storage",
              "contract": "MultiStakerCurveBPAMO",
              "src": "contracts/AMOs/implementations/curve/MultiStakerCurveBPAMO.sol:30"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)46_storage": {
              "label": "uint256[46]",
              "numberOfBytes": "1472"
            },
            "t_array(t_uint256)48_storage": {
              "label": "uint256[48]",
              "numberOfBytes": "1536"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IAMOMinter)10025": {
              "label": "contract IAMOMinter",
              "numberOfBytes": "20"
            },
            "t_contract(IERC20)1782": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_contract(IERC20)1782,t_uint256)": {
              "label": "mapping(contract IERC20 => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        }
      },
      "contracts/AMOs/implementations/curve/BaseCurveAMO.sol:BaseCurveAMO": {
        "src": "contracts/AMOs/implementations/curve/BaseCurveAMO.sol:12",
        "inherit": [
          "contracts/AMOs/BaseAMO.sol:BaseAMO",
          "contracts/interfaces/IAMO.sol:IAMO",
          "contracts/AMOs/BaseAMOStorage.sol:BaseAMOStorage",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "amoMinter",
              "offset": 2,
              "slot": "0",
              "type": "t_contract(IAMOMinter)10025",
              "contract": "BaseAMOStorage",
              "src": "contracts/AMOs/BaseAMOStorage.sol:23"
            },
            {
              "label": "lastBalances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_contract(IERC20)1782,t_uint256)",
              "contract": "BaseAMOStorage",
              "src": "contracts/AMOs/BaseAMOStorage.sol:29"
            },
            {
              "label": "protocolDebts",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_contract(IERC20)1782,t_uint256)",
              "contract": "BaseAMOStorage",
              "src": "contracts/AMOs/BaseAMOStorage.sol:31"
            },
            {
              "label": "protocolGains",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_contract(IERC20)1782,t_uint256)",
              "contract": "BaseAMOStorage",
              "src": "contracts/AMOs/BaseAMOStorage.sol:33"
            },
            {
              "label": "__gapStorage",
              "offset": 0,
              "slot": "4",
              "type": "t_array(t_uint256)46_storage",
              "contract": "BaseAMOStorage",
              "src": "contracts/AMOs/BaseAMOStorage.sol:35"
            },
            {
              "label": "agToken",
              "offset": 0,
              "slot": "50",
              "type": "t_contract(IERC20)1782",
              "contract": "BaseCurveAMO",
              "src": "contracts/AMOs/implementations/curve/BaseCurveAMO.sol:14"
            },
            {
              "label": "mainPool",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "BaseCurveAMO",
              "src": "contracts/AMOs/implementations/curve/BaseCurveAMO.sol:16"
            },
            {
              "label": "__gapBaseCurveAMO",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)48_storage",
              "contract": "BaseCurveAMO",
              "src": "contracts/AMOs/implementations/curve/BaseCurveAMO.sol:18"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)46_storage": {
              "label": "uint256[46]",
              "numberOfBytes": "1472"
            },
            "t_array(t_uint256)48_storage": {
              "label": "uint256[48]",
              "numberOfBytes": "1536"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IAMOMinter)10025": {
              "label": "contract IAMOMinter",
              "numberOfBytes": "20"
            },
            "t_contract(IERC20)1782": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_contract(IERC20)1782,t_uint256)": {
              "label": "mapping(contract IERC20 => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        }
      },
      "contracts/AMOs/implementations/curve/BaseCurveBPAMO.sol:BaseCurveBPAMO": {
        "src": "contracts/AMOs/implementations/curve/BaseCurveBPAMO.sol:12",
        "inherit": [
          "contracts/AMOs/implementations/curve/BaseCurveAMO.sol:BaseCurveAMO",
          "contracts/AMOs/BaseAMO.sol:BaseAMO",
          "contracts/interfaces/IAMO.sol:IAMO",
          "contracts/AMOs/BaseAMOStorage.sol:BaseAMOStorage",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "keeperInfo()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "amoMinter",
              "offset": 2,
              "slot": "0",
              "type": "t_contract(IAMOMinter)10025",
              "contract": "BaseAMOStorage",
              "src": "contracts/AMOs/BaseAMOStorage.sol:23"
            },
            {
              "label": "lastBalances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_contract(IERC20)1782,t_uint256)",
              "contract": "BaseAMOStorage",
              "src": "contracts/AMOs/BaseAMOStorage.sol:29"
            },
            {
              "label": "protocolDebts",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_contract(IERC20)1782,t_uint256)",
              "contract": "BaseAMOStorage",
              "src": "contracts/AMOs/BaseAMOStorage.sol:31"
            },
            {
              "label": "protocolGains",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_contract(IERC20)1782,t_uint256)",
              "contract": "BaseAMOStorage",
              "src": "contracts/AMOs/BaseAMOStorage.sol:33"
            },
            {
              "label": "__gapStorage",
              "offset": 0,
              "slot": "4",
              "type": "t_array(t_uint256)46_storage",
              "contract": "BaseAMOStorage",
              "src": "contracts/AMOs/BaseAMOStorage.sol:35"
            },
            {
              "label": "agToken",
              "offset": 0,
              "slot": "50",
              "type": "t_contract(IERC20)1782",
              "contract": "BaseCurveAMO",
              "src": "contracts/AMOs/implementations/curve/BaseCurveAMO.sol:14"
            },
            {
              "label": "mainPool",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "BaseCurveAMO",
              "src": "contracts/AMOs/implementations/curve/BaseCurveAMO.sol:16"
            },
            {
              "label": "__gapBaseCurveAMO",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)48_storage",
              "contract": "BaseCurveAMO",
              "src": "contracts/AMOs/implementations/curve/BaseCurveAMO.sol:18"
            },
            {
              "label": "__gapBaseCurveBPAMO",
              "offset": 0,
              "slot": "100",
              "type": "t_array(t_uint256)50_storage",
              "contract": "BaseCurveBPAMO",
              "src": "contracts/AMOs/implementations/curve/BaseCurveBPAMO.sol:16"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)46_storage": {
              "label": "uint256[46]",
              "numberOfBytes": "1472"
            },
            "t_array(t_uint256)48_storage": {
              "label": "uint256[48]",
              "numberOfBytes": "1536"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IAMOMinter)10025": {
              "label": "contract IAMOMinter",
              "numberOfBytes": "20"
            },
            "t_contract(IERC20)1782": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_contract(IERC20)1782,t_uint256)": {
              "label": "mapping(contract IERC20 => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        }
      },
      "contracts/AMOs/implementations/curve/MultiStakerCurveBPAMO.sol:MultiStakerCurveBPAMO": {
        "src": "contracts/AMOs/implementations/curve/MultiStakerCurveBPAMO.sol:17",
        "inherit": [
          "contracts/AMOs/implementations/curve/BaseCurveBPAMO.sol:BaseCurveBPAMO",
          "contracts/AMOs/implementations/curve/BaseCurveAMO.sol:BaseCurveAMO",
          "contracts/AMOs/BaseAMO.sol:BaseAMO",
          "contracts/interfaces/IAMO.sol:IAMO",
          "contracts/AMOs/BaseAMOStorage.sol:BaseAMOStorage",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address)",
          "setStakeDAOProportion(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "amoMinter",
              "offset": 2,
              "slot": "0",
              "type": "t_contract(IAMOMinter)10025",
              "contract": "BaseAMOStorage",
              "src": "contracts/AMOs/BaseAMOStorage.sol:23"
            },
            {
              "label": "lastBalances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_contract(IERC20)1782,t_uint256)",
              "contract": "BaseAMOStorage",
              "src": "contracts/AMOs/BaseAMOStorage.sol:29"
            },
            {
              "label": "protocolDebts",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_contract(IERC20)1782,t_uint256)",
              "contract": "BaseAMOStorage",
              "src": "contracts/AMOs/BaseAMOStorage.sol:31"
            },
            {
              "label": "protocolGains",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_contract(IERC20)1782,t_uint256)",
              "contract": "BaseAMOStorage",
              "src": "contracts/AMOs/BaseAMOStorage.sol:33"
            },
            {
              "label": "__gapStorage",
              "offset": 0,
              "slot": "4",
              "type": "t_array(t_uint256)46_storage",
              "contract": "BaseAMOStorage",
              "src": "contracts/AMOs/BaseAMOStorage.sol:35"
            },
            {
              "label": "agToken",
              "offset": 0,
              "slot": "50",
              "type": "t_contract(IERC20)1782",
              "contract": "BaseCurveAMO",
              "src": "contracts/AMOs/implementations/curve/BaseCurveAMO.sol:14"
            },
            {
              "label": "mainPool",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "BaseCurveAMO",
              "src": "contracts/AMOs/implementations/curve/BaseCurveAMO.sol:16"
            },
            {
              "label": "__gapBaseCurveAMO",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)48_storage",
              "contract": "BaseCurveAMO",
              "src": "contracts/AMOs/implementations/curve/BaseCurveAMO.sol:18"
            },
            {
              "label": "__gapBaseCurveBPAMO",
              "offset": 0,
              "slot": "100",
              "type": "t_array(t_uint256)50_storage",
              "contract": "BaseCurveBPAMO",
              "src": "contracts/AMOs/implementations/curve/BaseCurveBPAMO.sol:16"
            },
            {
              "label": "stakeDAOProportion",
              "offset": 0,
              "slot": "150",
              "type": "t_uint256",
              "contract": "MultiStakerCurveBPAMO",
              "src": "contracts/AMOs/implementations/curve/MultiStakerCurveBPAMO.sol:25"
            },
            {
              "label": "__gapMultiStakerCurveBPAMO",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)49_storage",
              "contract": "MultiStakerCurveBPAMO",
              "src": "contracts/AMOs/implementations/curve/MultiStakerCurveBPAMO.sol:30"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)46_storage": {
              "label": "uint256[46]",
              "numberOfBytes": "1472"
            },
            "t_array(t_uint256)48_storage": {
              "label": "uint256[48]",
              "numberOfBytes": "1536"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IAMOMinter)10025": {
              "label": "contract IAMOMinter",
              "numberOfBytes": "20"
            },
            "t_contract(IERC20)1782": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_contract(IERC20)1782,t_uint256)": {
              "label": "mapping(contract IERC20 => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        }
      },
      "contracts/AMOs/implementations/stakeDAO/BPAMOs/StakeAgEURvEUROCAMO.sol:StakeAgEURvEUROCAMO": {
        "src": "contracts/AMOs/implementations/stakeDAO/BPAMOs/StakeAgEURvEUROCAMO.sol:9",
        "version": {
          "withMetadata": "9006c2fd1ada261b8bbea1e4861fe434cd00a3cda558e749fa46abe97f08f1fe",
          "withoutMetadata": "1872f5eef204d34d86c40a0a64e5792515876a14c2109d5502b3898a6e22cb29",
          "linkedWithoutMetadata": "1872f5eef204d34d86c40a0a64e5792515876a14c2109d5502b3898a6e22cb29"
        },
        "inherit": [
          "contracts/AMOs/implementations/stakeDAO/StakeBPAMO.sol:StakeBPAMO",
          "contracts/AMOs/implementations/curve/BaseCurveBPAMO.sol:BaseCurveBPAMO",
          "contracts/AMOs/implementations/curve/BaseCurveAMO.sol:BaseCurveAMO",
          "contracts/AMOs/BaseAMO.sol:BaseAMO",
          "contracts/interfaces/IAMO.sol:IAMO",
          "contracts/AMOs/BaseAMOStorage.sol:BaseAMOStorage",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "amoMinter",
              "offset": 2,
              "slot": "0",
              "type": "t_contract(IAMOMinter)10025",
              "contract": "BaseAMOStorage",
              "src": "contracts/AMOs/BaseAMOStorage.sol:23"
            },
            {
              "label": "lastBalances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_contract(IERC20)1782,t_uint256)",
              "contract": "BaseAMOStorage",
              "src": "contracts/AMOs/BaseAMOStorage.sol:29"
            },
            {
              "label": "protocolDebts",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_contract(IERC20)1782,t_uint256)",
              "contract": "BaseAMOStorage",
              "src": "contracts/AMOs/BaseAMOStorage.sol:31"
            },
            {
              "label": "protocolGains",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_contract(IERC20)1782,t_uint256)",
              "contract": "BaseAMOStorage",
              "src": "contracts/AMOs/BaseAMOStorage.sol:33"
            },
            {
              "label": "__gapStorage",
              "offset": 0,
              "slot": "4",
              "type": "t_array(t_uint256)46_storage",
              "contract": "BaseAMOStorage",
              "src": "contracts/AMOs/BaseAMOStorage.sol:35"
            },
            {
              "label": "agToken",
              "offset": 0,
              "slot": "50",
              "type": "t_contract(IERC20)1782",
              "contract": "BaseCurveAMO",
              "src": "contracts/AMOs/implementations/curve/BaseCurveAMO.sol:14"
            },
            {
              "label": "mainPool",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "BaseCurveAMO",
              "src": "contracts/AMOs/implementations/curve/BaseCurveAMO.sol:16"
            },
            {
              "label": "__gapBaseCurveAMO",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)48_storage",
              "contract": "BaseCurveAMO",
              "src": "contracts/AMOs/implementations/curve/BaseCurveAMO.sol:18"
            },
            {
              "label": "__gapBaseCurveBPAMO",
              "offset": 0,
              "slot": "100",
              "type": "t_array(t_uint256)50_storage",
              "contract": "BaseCurveBPAMO",
              "src": "contracts/AMOs/implementations/curve/BaseCurveBPAMO.sol:16"
            },
            {
              "label": "__gapStakeBPAMO",
              "offset": 0,
              "slot": "150",
              "type": "t_array(t_uint256)50_storage",
              "contract": "StakeBPAMO",
              "src": "contracts/AMOs/implementations/stakeDAO/StakeBPAMO.sol:16"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)46_storage": {
              "label": "uint256[46]",
              "numberOfBytes": "1472"
            },
            "t_array(t_uint256)48_storage": {
              "label": "uint256[48]",
              "numberOfBytes": "1536"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IAMOMinter)10025": {
              "label": "contract IAMOMinter",
              "numberOfBytes": "20"
            },
            "t_contract(IERC20)1782": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_contract(IERC20)1782,t_uint256)": {
              "label": "mapping(contract IERC20 => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        }
      },
      "contracts/AMOs/implementations/stakeDAO/StakeBPAMO.sol:StakeBPAMO": {
        "src": "contracts/AMOs/implementations/stakeDAO/StakeBPAMO.sol:15",
        "inherit": [
          "contracts/AMOs/implementations/curve/BaseCurveBPAMO.sol:BaseCurveBPAMO",
          "contracts/AMOs/implementations/curve/BaseCurveAMO.sol:BaseCurveAMO",
          "contracts/AMOs/BaseAMO.sol:BaseAMO",
          "contracts/interfaces/IAMO.sol:IAMO",
          "contracts/AMOs/BaseAMOStorage.sol:BaseAMOStorage",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "amoMinter",
              "offset": 2,
              "slot": "0",
              "type": "t_contract(IAMOMinter)10025",
              "contract": "BaseAMOStorage",
              "src": "contracts/AMOs/BaseAMOStorage.sol:23"
            },
            {
              "label": "lastBalances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_contract(IERC20)1782,t_uint256)",
              "contract": "BaseAMOStorage",
              "src": "contracts/AMOs/BaseAMOStorage.sol:29"
            },
            {
              "label": "protocolDebts",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_contract(IERC20)1782,t_uint256)",
              "contract": "BaseAMOStorage",
              "src": "contracts/AMOs/BaseAMOStorage.sol:31"
            },
            {
              "label": "protocolGains",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_contract(IERC20)1782,t_uint256)",
              "contract": "BaseAMOStorage",
              "src": "contracts/AMOs/BaseAMOStorage.sol:33"
            },
            {
              "label": "__gapStorage",
              "offset": 0,
              "slot": "4",
              "type": "t_array(t_uint256)46_storage",
              "contract": "BaseAMOStorage",
              "src": "contracts/AMOs/BaseAMOStorage.sol:35"
            },
            {
              "label": "agToken",
              "offset": 0,
              "slot": "50",
              "type": "t_contract(IERC20)1782",
              "contract": "BaseCurveAMO",
              "src": "contracts/AMOs/implementations/curve/BaseCurveAMO.sol:14"
            },
            {
              "label": "mainPool",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "BaseCurveAMO",
              "src": "contracts/AMOs/implementations/curve/BaseCurveAMO.sol:16"
            },
            {
              "label": "__gapBaseCurveAMO",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)48_storage",
              "contract": "BaseCurveAMO",
              "src": "contracts/AMOs/implementations/curve/BaseCurveAMO.sol:18"
            },
            {
              "label": "__gapBaseCurveBPAMO",
              "offset": 0,
              "slot": "100",
              "type": "t_array(t_uint256)50_storage",
              "contract": "BaseCurveBPAMO",
              "src": "contracts/AMOs/implementations/curve/BaseCurveBPAMO.sol:16"
            },
            {
              "label": "__gapStakeBPAMO",
              "offset": 0,
              "slot": "150",
              "type": "t_array(t_uint256)50_storage",
              "contract": "StakeBPAMO",
              "src": "contracts/AMOs/implementations/stakeDAO/StakeBPAMO.sol:16"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)46_storage": {
              "label": "uint256[46]",
              "numberOfBytes": "1472"
            },
            "t_array(t_uint256)48_storage": {
              "label": "uint256[48]",
              "numberOfBytes": "1536"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IAMOMinter)10025": {
              "label": "contract IAMOMinter",
              "numberOfBytes": "20"
            },
            "t_contract(IERC20)1782": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_contract(IERC20)1782,t_uint256)": {
              "label": "mapping(contract IERC20 => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        }
      },
      "contracts/amoMinter/AMOMinter.sol:AMOMinter": {
        "src": "contracts/amoMinter/AMOMinter.sol:19",
        "version": {
          "withMetadata": "d73646a58aebdc6450682d40bc5c51d51b7d3d28dcaca73d8df2deea24c2cdca",
          "withoutMetadata": "8f8fddbcb4d47bd0879c3067f60f068e0a07283760408a67d87c338f14ac7134",
          "linkedWithoutMetadata": "8f8fddbcb4d47bd0879c3067f60f068e0a07283760408a67d87c338f14ac7134"
        },
        "inherit": [
          "contracts/interfaces/IAMOMinter.sol:IAMOMinter",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [
          "initialize(address)",
          "()",
          "isGovernor(address)",
          "isApproved(address)",
          "callerDebt(address)",
          "allAMOAddresses()",
          "allAMOTokens(address)",
          "repayDebtFor(contract IAMO[],contract IERC20[],uint256[])",
          "sendToAMO(address,contract IERC20[],bool[],uint256[],bytes[])",
          "receiveFromAMO(address,contract IERC20[],bool[],uint256[],address[],bytes[])",
          "addAMO(address)",
          "removeAMO(address)",
          "addTokenRightToAMO(address,address,uint256)",
          "removeTokenRightFromAMO(address,address)",
          "toggleCallerToAMO(address,address)",
          "setBorrowCap(address,address,uint256)",
          "setAMOMinter(address)",
          "setCoreBorrow(address)",
          "recoverERC20(address,address,uint256)",
          "execute(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "coreBorrow",
              "offset": 2,
              "slot": "0",
              "type": "t_contract(ICoreBorrow)10109",
              "contract": "AMOMinter",
              "src": "contracts/amoMinter/AMOMinter.sol:23"
            },
            {
              "label": "amoList",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_contract(IAMO)9939)dyn_storage",
              "contract": "AMOMinter",
              "src": "contracts/amoMinter/AMOMinter.sol:25"
            },
            {
              "label": "amosWhitelist",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_contract(IAMO)9939,t_uint256)",
              "contract": "AMOMinter",
              "src": "contracts/amoMinter/AMOMinter.sol:27"
            },
            {
              "label": "amosWhitelistCaller",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_contract(IAMO)9939,t_mapping(t_address,t_uint256))",
              "contract": "AMOMinter",
              "src": "contracts/amoMinter/AMOMinter.sol:29"
            },
            {
              "label": "amosWhitelistToken",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_contract(IAMO)9939,t_mapping(t_contract(IERC20)1782,t_uint256))",
              "contract": "AMOMinter",
              "src": "contracts/amoMinter/AMOMinter.sol:31"
            },
            {
              "label": "amoTokens",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_contract(IAMO)9939,t_array(t_contract(IERC20)1782)dyn_storage)",
              "contract": "AMOMinter",
              "src": "contracts/amoMinter/AMOMinter.sol:33"
            },
            {
              "label": "borrowCaps",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_contract(IAMO)9939,t_mapping(t_contract(IERC20)1782,t_uint256))",
              "contract": "AMOMinter",
              "src": "contracts/amoMinter/AMOMinter.sol:35"
            },
            {
              "label": "amoDebts",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_contract(IAMO)9939,t_mapping(t_contract(IERC20)1782,t_uint256))",
              "contract": "AMOMinter",
              "src": "contracts/amoMinter/AMOMinter.sol:37"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)42_storage",
              "contract": "AMOMinter",
              "src": "contracts/amoMinter/AMOMinter.sol:39"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_contract(IAMO)9939)dyn_storage": {
              "label": "contract IAMO[]",
              "numberOfBytes": "32"
            },
            "t_array(t_contract(IERC20)1782)dyn_storage": {
              "label": "contract IERC20[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)42_storage": {
              "label": "uint256[42]",
              "numberOfBytes": "1344"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IAMO)9939": {
              "label": "contract IAMO",
              "numberOfBytes": "20"
            },
            "t_contract(ICoreBorrow)10109": {
              "label": "contract ICoreBorrow",
              "numberOfBytes": "20"
            },
            "t_contract(IERC20)1782": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_contract(IAMO)9939,t_array(t_contract(IERC20)1782)dyn_storage)": {
              "label": "mapping(contract IAMO => contract IERC20[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_contract(IAMO)9939,t_mapping(t_address,t_uint256))": {
              "label": "mapping(contract IAMO => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_contract(IAMO)9939,t_mapping(t_contract(IERC20)1782,t_uint256))": {
              "label": "mapping(contract IAMO => mapping(contract IERC20 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_contract(IAMO)9939,t_uint256)": {
              "label": "mapping(contract IAMO => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_contract(IERC20)1782,t_uint256)": {
              "label": "mapping(contract IERC20 => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        }
      },
      "contracts/external/ProxyAdmin.sol:ProxyAdmin": {
        "src": "contracts/external/ProxyAdmin.sol:13",
        "version": {
          "withMetadata": "65833b9ee7c47a0073d67ca63c4e2a087c2d9bef512135a3c9c4cdf5d84cd66e",
          "withoutMetadata": "3949e5a87b71d6b9b98068c576295540570b06ba93303edad9e2f4c59af06ccb",
          "linkedWithoutMetadata": "3949e5a87b71d6b9b98068c576295540570b06ba93303edad9e2f4c59af06ccb"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "getProxyImplementation(address)",
          "getProxyAdmin(address)",
          "changeProxyAdmin(address,address)",
          "upgrade(address,address)",
          "upgradeAndCall(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:191"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        }
      },
      "contracts/external/TransparentUpgradeableProxy.sol:TransparentUpgradeableProxy": {
        "src": "contracts/external/TransparentUpgradeableProxy.sol:29",
        "version": {
          "withMetadata": "19211376867cbe60c99c68bdccdca7a51e446f55eee56f61f50ad8da5c187a02",
          "withoutMetadata": "19211376867cbe60c99c68bdccdca7a51e446f55eee56f61f50ad8da5c187a02",
          "linkedWithoutMetadata": "19211376867cbe60c99c68bdccdca7a51e446f55eee56f61f50ad8da5c187a02"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:ERC1967Proxy",
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade",
          "@openzeppelin/contracts/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,address,bytes)",
          "admin()",
          "implementation()",
          "changeAdmin(address)",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TransparentUpgradeableProxy",
            "src": "contracts/external/TransparentUpgradeableProxy.sol:34"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:191"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:191"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "contracts/interfaces/IAMO.sol:IAMO": {
        "src": "contracts/interfaces/IAMO.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balance(address)",
          "debt(address)",
          "getNavOfInvestedAssets(address)",
          "pushSurplus(address,address,bytes[])",
          "claimRewards(contract IERC20[])",
          "sellRewards(uint256,bytes)",
          "changeAllowance(contract IERC20[],address[],uint256[])",
          "recoverERC20(address,address,uint256)",
          "pull(contract IERC20[],uint256[],bytes[])",
          "push(contract IERC20[],uint256[],bytes[])",
          "setAMOMinter(address)",
          "setToken(address)",
          "removeToken(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "contracts/interfaces/IAMOMinter.sol:IAMOMinter": {
        "src": "contracts/interfaces/IAMOMinter.sol:13",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isGovernor(address)",
          "isApproved(address)",
          "callerDebt(address)",
          "amoDebts(address,address)",
          "sendToAMO(address,contract IERC20[],bool[],uint256[],bytes[])",
          "receiveFromAMO(address,contract IERC20[],bool[],uint256[],address[],bytes[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "contracts/interfaces/IAgToken.sol:IAgToken": {
        "src": "contracts/interfaces/IAgToken.sol:12",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "mint(address,uint256)",
          "burnFrom(uint256,address,address)",
          "burnSelf(uint256,address)",
          "addMinter(address)",
          "removeMinter(address)",
          "setTreasury(address)",
          "isMinter(address)",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "contracts/interfaces/ICoreBorrow.sol:ICoreBorrow": {
        "src": "contracts/interfaces/ICoreBorrow.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isGovernor(address)",
          "isGovernorOrGuardian(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "contracts/interfaces/ICurveBPAMO.sol:ICurveBPAMO": {
        "src": "contracts/interfaces/ICurveBPAMO.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "keeperInfo()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "contracts/interfaces/ITreasury.sol:ITreasury": {
        "src": "contracts/interfaces/ITreasury.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addMinter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "contracts/interfaces/external/aave/IAave.sol:DataTypes": {
        "src": "contracts/interfaces/external/aave/IAave.sol:7",
        "version": {
          "withMetadata": "461e13d531014647732978dbfe000c5eb6c2f01e95023ea4e500bf85cc6f0b82",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "contracts/interfaces/external/aave/IAave.sol:IOptionalERC20": {
        "src": "contracts/interfaces/external/aave/IAave.sol:58",
        "inherit": [],
        "libraries": [],
        "methods": [
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "contracts/interfaces/external/aave/IAave.sol:IPriceOracle": {
        "src": "contracts/interfaces/external/aave/IAave.sol:62",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getAssetPrice(address)",
          "getAssetsPrices(address[])",
          "getSourceOfAsset(address)",
          "getFallbackOracle()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "contracts/interfaces/external/aave/IAave.sol:IReserveInterestRateStrategy": {
        "src": "contracts/interfaces/external/aave/IAave.sol:96",
        "inherit": [],
        "libraries": [],
        "methods": [
          "baseVariableBorrowRate()",
          "getMaxVariableBorrowRate()",
          "stableRateSlope1()",
          "stableRateSlope2()",
          "variableRateSlope1()",
          "variableRateSlope2()",
          "OPTIMAL_UTILIZATION_RATE()",
          "calculateInterestRates(address,uint256,uint256,uint256,uint256,uint256)",
          "calculateInterestRates(address,address,uint256,uint256,uint256,uint256,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "contracts/interfaces/external/aave/IAave.sol:IStakedAave": {
        "src": "contracts/interfaces/external/aave/IAave.sol:73",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "stake(address,uint256)",
          "redeem(address,uint256)",
          "cooldown()",
          "claimRewards(address,uint256)",
          "getTotalRewardsBalance(address)",
          "COOLDOWN_SECONDS()",
          "stakersCooldowns(address)",
          "UNSTAKE_WINDOW()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "contracts/interfaces/external/aave/IAaveIncentivesController.sol:IAaveIncentivesController": {
        "src": "contracts/interfaces/external/aave/IAaveIncentivesController.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getRewardsBalance(address[],address)",
          "claimRewards(address[],uint256,address)",
          "claimRewardsOnBehalf(address[],uint256,address,address)",
          "getUserUnclaimedRewards(address)",
          "REWARD_TOKEN()",
          "getDistributionEnd()",
          "getAssetData(address)",
          "assets(address)",
          "configureAssets(address[],uint256[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "contracts/interfaces/external/aave/IAaveToken.sol:IAToken": {
        "src": "contracts/interfaces/external/aave/IAaveToken.sol:140",
        "inherit": [
          "contracts/interfaces/external/aave/IAaveToken.sol:IInitializableAToken",
          "contracts/interfaces/external/aave/IAaveToken.sol:IScaledBalanceToken",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "mint(address,uint256,uint256)",
          "burn(address,address,uint256,uint256)",
          "mintToTreasury(uint256,uint256)",
          "transferOnLiquidation(address,address,uint256)",
          "transferUnderlyingTo(address,uint256)",
          "handleRepayment(address,uint256)",
          "getIncentivesController()",
          "UNDERLYING_ASSET_ADDRESS()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "contracts/interfaces/external/aave/IAaveToken.sol:IInitializableAToken": {
        "src": "contracts/interfaces/external/aave/IAaveToken.sol:94",
        "inherit": [],
        "libraries": [],
        "methods": [
          "initialize(address,address,address,address,uint8,string,string,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "contracts/interfaces/external/aave/IAaveToken.sol:IScaledBalanceToken": {
        "src": "contracts/interfaces/external/aave/IAaveToken.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "scaledBalanceOf(address)",
          "getScaledUserBalanceAndSupply(address)",
          "scaledTotalSupply()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "contracts/interfaces/external/aave/IAaveToken.sol:IVariableDebtToken": {
        "src": "contracts/interfaces/external/aave/IAaveToken.sol:38",
        "inherit": [
          "contracts/interfaces/external/aave/IAaveToken.sol:IScaledBalanceToken",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "mint(address,address,uint256,uint256)",
          "burn(address,uint256,uint256)",
          "getIncentivesController()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "contracts/interfaces/external/aave/ILendingPool.sol:ILendingPool": {
        "src": "contracts/interfaces/external/aave/ILendingPool.sol:65",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(address,uint256,address,uint16)",
          "withdraw(address,uint256,address)",
          "borrow(address,uint256,uint256,uint16,address)",
          "repay(address,uint256,uint256,address)",
          "swapBorrowRateMode(address,uint256)",
          "rebalanceStableBorrowRate(address,address)",
          "setUserUseReserveAsCollateral(address,bool)",
          "liquidationCall(address,address,address,uint256,bool)",
          "flashLoan(address,address[],uint256[],uint256[],address,bytes,uint16)",
          "getUserAccountData(address)",
          "initReserve(address,address,address,address,address)",
          "setReserveInterestRateStrategyAddress(address,address)",
          "setConfiguration(address,uint256)",
          "getConfiguration(address)",
          "getUserConfiguration(address)",
          "getReserveNormalizedIncome(address)",
          "getReserveNormalizedVariableDebt(address)",
          "getReserveData(address)",
          "finalizeTransfer(address,address,address,uint256,uint256,uint256)",
          "getReservesList()",
          "getAddressesProvider()",
          "setPause(bool)",
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "contracts/interfaces/external/aave/ILendingPool.sol:ILendingPoolAddressesProvider": {
        "src": "contracts/interfaces/external/aave/ILendingPool.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getMarketId()",
          "setMarketId(string)",
          "setAddress(bytes32,address)",
          "setAddressAsProxy(bytes32,address)",
          "getAddress(bytes32)",
          "getLendingPool()",
          "setLendingPoolImpl(address)",
          "getLendingPoolConfigurator()",
          "setLendingPoolConfiguratorImpl(address)",
          "getLendingPoolCollateralManager()",
          "setLendingPoolCollateralManager(address)",
          "getPoolAdmin()",
          "setPoolAdmin(address)",
          "getEmergencyAdmin()",
          "setEmergencyAdmin(address)",
          "getPriceOracle()",
          "setPriceOracle(address)",
          "getLendingRateOracle()",
          "setLendingRateOracle(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "contracts/interfaces/external/aave/IProtocolDataProvider.sol:IProtocolDataProvider": {
        "src": "contracts/interfaces/external/aave/IProtocolDataProvider.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "ADDRESSES_PROVIDER()",
          "getAllReservesTokens()",
          "getAllATokens()",
          "getReserveConfigurationData(address)",
          "getReserveData(address)",
          "getUserReserveData(address,address)",
          "getReserveTokensAddresses(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "contracts/interfaces/external/convex/IBaseRewardPool.sol:IConvexBaseRewardPool": {
        "src": "contracts/interfaces/external/convex/IBaseRewardPool.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "duration()",
          "earned(address)",
          "extraRewards(uint256)",
          "extraRewardsLength()",
          "getReward()",
          "getReward(address,bool)",
          "lastTimeRewardApplicable()",
          "lastUpdateTime()",
          "newRewardRatio()",
          "periodFinish()",
          "pid()",
          "queueNewRewards(uint256)",
          "rewardRate()",
          "rewardToken()",
          "stake(uint256)",
          "stakeAll()",
          "stakeFor(address,uint256)",
          "stakingToken()",
          "totalSupply()",
          "withdraw(uint256,bool)",
          "withdrawAll(bool)",
          "withdrawAllAndUnwrap(bool)",
          "withdrawAndUnwrap(uint256,bool)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "contracts/interfaces/external/convex/IBooster.sol:IConvexBooster": {
        "src": "contracts/interfaces/external/convex/IBooster.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "FEE_DENOMINATOR()",
          "addPool(address,address,uint256)",
          "claimRewards(uint256,address)",
          "deposit(uint256,uint256,bool)",
          "depositAll(uint256,bool)",
          "gaugeMap(address)",
          "poolInfo(uint256)",
          "staker()",
          "withdraw(uint256,uint256)",
          "withdrawAll(uint256)",
          "withdrawTo(uint256,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "contracts/interfaces/external/convex/IClaimZap.sol:IConvexClaimZap": {
        "src": "contracts/interfaces/external/convex/IClaimZap.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "claimRewards(address[],address[],address[],address[],uint256,uint256,uint256,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "contracts/interfaces/external/convex/ICvxRewardPool.sol:ICvxRewardPool": {
        "src": "contracts/interfaces/external/convex/ICvxRewardPool.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "duration()",
          "earned(address)",
          "extraRewards(uint256)",
          "extraRewardsLength()",
          "getReward(bool)",
          "getReward(address,bool,bool)",
          "lastTimeRewardApplicable()",
          "rewardRate()",
          "stake(uint256)",
          "stakeAll()",
          "stakeFor(address,uint256)",
          "totalSupply()",
          "withdraw(uint256,bool)",
          "withdrawAll(bool)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "contracts/interfaces/external/convex/IVirtualBalanceRewardPool.sol:IVirtualBalanceRewardPool": {
        "src": "contracts/interfaces/external/convex/IVirtualBalanceRewardPool.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "currentRewards()",
          "deposits()",
          "duration()",
          "earned(address)",
          "getReward()",
          "getReward(address)",
          "lastTimeRewardApplicable()",
          "lastUpdateTime()",
          "operator()",
          "periodFinish()",
          "rewardRate()",
          "rewardToken()",
          "rewards(address)",
          "stake(address,uint256)",
          "totalSupply()",
          "withdraw(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "contracts/interfaces/external/curve/ICurveCryptoSwapPool.sol:ICurveCryptoSwapPool": {
        "src": "contracts/interfaces/external/curve/ICurveCryptoSwapPool.sol:8",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "A()",
          "get_virtual_price()",
          "calc_token_fee(uint256[3],uint256[3])",
          "calc_token_amount(uint256[3],bool)",
          "add_liquidity(uint256[3],uint256)",
          "get_dy(int128,int128,uint256)",
          "exchange(int128,int128,uint256,uint256)",
          "remove_liquidity(uint256,uint256[3])",
          "remove_liquidity_imbalance(uint256[3],uint256)",
          "calc_withdraw_one_coin(uint256,int128)",
          "remove_liquidity_one_coin(uint256,int128,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "contracts/interfaces/external/curve/IMetaPool.sol:IMetaPool": {
        "src": "contracts/interfaces/external/curve/IMetaPool.sol:8",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "coins()",
          "get_balances()",
          "get_previous_balances()",
          "get_twap_balances(uint256[],uint256[],uint256)",
          "get_price_cumulative_last()",
          "admin_fee()",
          "A()",
          "A_precise()",
          "get_virtual_price()",
          "calc_token_amount(uint256[],bool)",
          "calc_token_amount(uint256[],bool,bool)",
          "add_liquidity(uint256[],uint256)",
          "add_liquidity(uint256[],uint256,address)",
          "get_dy(int128,int128,uint256)",
          "get_dy(int128,int128,uint256,uint256[])",
          "get_dy_underlying(int128,int128,uint256)",
          "get_dy_underlying(int128,int128,uint256,uint256[])",
          "exchange(int128,int128,uint256,uint256)",
          "exchange(int128,int128,uint256,uint256,address)",
          "exchange_underlying(int128,int128,uint256,uint256)",
          "exchange_underlying(int128,int128,uint256,uint256,address)",
          "remove_liquidity(uint256,uint256[])",
          "remove_liquidity(uint256,uint256[],address)",
          "remove_liquidity_imbalance(uint256[],uint256)",
          "remove_liquidity_imbalance(uint256[],uint256,address)",
          "calc_withdraw_one_coin(uint256,int128)",
          "calc_withdraw_one_coin(uint256,int128,bool)",
          "remove_liquidity_one_coin(uint256,int128,uint256)",
          "remove_liquidity_one_coin(uint256,int128,uint256,address)",
          "admin_balances(uint256)",
          "withdraw_admin_fees()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "contracts/interfaces/external/curve/IMetaPool2.sol:IMetaPool2": {
        "src": "contracts/interfaces/external/curve/IMetaPool2.sol:10",
        "inherit": [
          "contracts/interfaces/external/curve/IMetaPoolBase.sol:IMetaPoolBase",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "coins()",
          "get_balances()",
          "get_previous_balances()",
          "get_price_cumulative_last()",
          "get_twap_balances(uint256[2],uint256[2],uint256)",
          "calc_token_amount(uint256[2],bool)",
          "calc_token_amount(uint256[2],bool,bool)",
          "add_liquidity(uint256[2],uint256)",
          "add_liquidity(uint256[2],uint256,address)",
          "get_dy(int128,int128,uint256,uint256[2])",
          "get_dy_underlying(int128,int128,uint256,uint256[2])",
          "remove_liquidity(uint256,uint256[2])",
          "remove_liquidity(uint256,uint256[2],address)",
          "remove_liquidity_imbalance(uint256[2],uint256)",
          "remove_liquidity_imbalance(uint256[2],uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "contracts/interfaces/external/curve/IMetaPool3.sol:IMetaPool3": {
        "src": "contracts/interfaces/external/curve/IMetaPool3.sol:10",
        "inherit": [
          "contracts/interfaces/external/curve/IMetaPoolBase.sol:IMetaPoolBase",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "coins()",
          "get_balances()",
          "get_previous_balances()",
          "get_price_cumulative_last()",
          "get_twap_balances(uint256[3],uint256[3],uint256)",
          "calc_token_amount(uint256[3],bool)",
          "calc_token_amount(uint256[3],bool,bool)",
          "add_liquidity(uint256[3],uint256)",
          "add_liquidity(uint256[3],uint256,address)",
          "get_dy(int128,int128,uint256,uint256[3])",
          "get_dy_underlying(int128,int128,uint256,uint256[3])",
          "remove_liquidity(uint256,uint256[3])",
          "remove_liquidity(uint256,uint256[3],address)",
          "remove_liquidity_imbalance(uint256[3],uint256)",
          "remove_liquidity_imbalance(uint256[3],uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "contracts/interfaces/external/curve/IMetaPoolBase.sol:IMetaPoolBase": {
        "src": "contracts/interfaces/external/curve/IMetaPoolBase.sol:8",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "admin_fee()",
          "A()",
          "A_precise()",
          "get_virtual_price()",
          "get_dy(int128,int128,uint256)",
          "get_dy_underlying(int128,int128,uint256)",
          "exchange(int128,int128,uint256,uint256)",
          "exchange(int128,int128,uint256,uint256,address)",
          "exchange_underlying(int128,int128,uint256,uint256)",
          "exchange_underlying(int128,int128,uint256,uint256,address)",
          "calc_withdraw_one_coin(uint256,int128)",
          "calc_withdraw_one_coin(uint256,int128,bool)",
          "remove_liquidity_one_coin(uint256,int128,uint256)",
          "remove_liquidity_one_coin(uint256,int128,uint256,address)",
          "admin_balances(uint256)",
          "withdraw_admin_fees()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "contracts/interfaces/external/curve/IStableSwapPool.sol:IStableSwapPool": {
        "src": "contracts/interfaces/external/curve/IStableSwapPool.sol:9",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "A()",
          "get_virtual_price()",
          "calc_token_amount(uint256[3],bool)",
          "add_liquidity(uint256[3],uint256)",
          "get_dy(int128,int128,uint256)",
          "exchange(int128,int128,uint256,uint256)",
          "remove_liquidity(uint256,uint256[3])",
          "remove_liquidity_imbalance(uint256[3],uint256)",
          "calc_withdraw_one_coin(uint256,int128)",
          "remove_liquidity_one_coin(uint256,int128,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "contracts/interfaces/external/euler/IEuler.sol:IDeferredLiquidityCheck": {
        "src": "contracts/interfaces/external/euler/IEuler.sol:135",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onDeferredLiquidityCheck(bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "contracts/interfaces/external/euler/IEuler.sol:IEuler": {
        "src": "contracts/interfaces/external/euler/IEuler.sol:13",
        "inherit": [],
        "libraries": [],
        "methods": [
          "moduleIdToImplementation(uint256)",
          "moduleIdToProxy(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "contracts/interfaces/external/euler/IEuler.sol:IEulerConstants": {
        "src": "contracts/interfaces/external/euler/IEuler.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "MAX_SANE_AMOUNT()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "contracts/interfaces/external/euler/IEuler.sol:IEulerDToken": {
        "src": "contracts/interfaces/external/euler/IEuler.sol:311",
        "inherit": [
          "contracts/interfaces/external/euler/IEuler.sol:IEulerConstants"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "totalSupplyExact()",
          "balanceOf(address)",
          "balanceOfExact(address)",
          "borrow(uint256,uint256)",
          "repay(uint256,uint256)",
          "approveDebt(uint256,address,uint256)",
          "debtAllowance(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "contracts/interfaces/external/euler/IEuler.sol:IEulerEToken": {
        "src": "contracts/interfaces/external/euler/IEuler.sol:269",
        "inherit": [
          "contracts/interfaces/external/euler/IEuler.sol:IEulerConstants"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "totalSupplyUnderlying()",
          "balanceOf(address)",
          "balanceOfUnderlying(address)",
          "reserveBalance()",
          "reserveBalanceUnderlying()",
          "touch()",
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "contracts/interfaces/external/euler/IEuler.sol:IEulerExec": {
        "src": "contracts/interfaces/external/euler/IEuler.sol:140",
        "inherit": [],
        "libraries": [],
        "methods": [
          "liquidity(address)",
          "detailedLiquidity(address)",
          "getPrice(address)",
          "getPriceFull(address)",
          "deferLiquidityCheck(address,bytes)",
          "batchDispatch(struct IEulerExec.EulerBatchItem[],address[])",
          "batchDispatchExtra(struct IEulerExec.EulerBatchItem[],address[],address[])",
          "trackAverageLiquidity(uint256,address,bool)",
          "unTrackAverageLiquidity(uint256)",
          "getAverageLiquidity(address)",
          "getAverageLiquidityWithDelegate(address)",
          "getAverageLiquidityDelegateAccount(address)",
          "pTokenWrap(address,uint256)",
          "pTokenUnWrap(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "contracts/interfaces/external/euler/IEuler.sol:IEulerMarkets": {
        "src": "contracts/interfaces/external/euler/IEuler.sol:35",
        "inherit": [],
        "libraries": [],
        "methods": [
          "activateMarket(address)",
          "activatePToken(address)",
          "underlyingToEToken(address)",
          "underlyingToDToken(address)",
          "underlyingToPToken(address)",
          "underlyingToAssetConfig(address)",
          "underlyingToAssetConfigUnresolved(address)",
          "eTokenToUnderlying(address)",
          "eTokenToDToken(address)",
          "interestRateModel(address)",
          "interestRate(address)",
          "interestAccumulator(address)",
          "reserveFee(address)",
          "getPricingConfig(address)",
          "getEnteredMarkets(address)",
          "enterMarket(uint256,address)",
          "exitMarket(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "contracts/interfaces/external/stakeDAO/IClaimerRewards.sol:IClaimerRewards": {
        "src": "contracts/interfaces/external/stakeDAO/IClaimerRewards.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "claimRewards(address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "contracts/interfaces/external/stakeDAO/ILiquidityGauge.sol:ILiquidityGauge": {
        "src": "contracts/interfaces/external/stakeDAO/ILiquidityGauge.sol:7",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "claim_rewards(address)",
          "claim_rewards(address,address)",
          "claim_rewards_for(address,address)",
          "deposit_reward_token(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "contracts/interfaces/external/stakeDAO/IStakeCurveVault.sol:IStakeCurveVault": {
        "src": "contracts/interfaces/external/stakeDAO/IStakeCurveVault.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(address,uint256,bool)",
          "withdraw(uint256)",
          "withdrawAll()",
          "setWithdrawnFee(uint256)",
          "withdrawalFee()",
          "accumulatedFee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        }
      },
      "contracts/keeperJobs/curve/BPAMOJob.sol:BPAMOJob": {
        "src": "contracts/keeperJobs/curve/BPAMOJob.sol:19",
        "version": {
          "withMetadata": "956d58894ee902540773e52a71ad8e64ba2a92a56c4a62d0fe7758824f3514fb",
          "withoutMetadata": "f8f78a0de3126c8a24a717f0bd5b82232999add4447a60cbb21b533e783c2e61",
          "linkedWithoutMetadata": "f8f78a0de3126c8a24a717f0bd5b82232999add4447a60cbb21b533e783c2e61"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "()",
          "initialize(address)",
          "toggleWhitelist(address)",
          "currentState(address)",
          "adjust(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "amoMinter",
              "offset": 2,
              "slot": "0",
              "type": "t_contract(IAMOMinter)10025",
              "contract": "BPAMOJob",
              "src": "contracts/keeperJobs/curve/BPAMOJob.sol:24"
            },
            {
              "label": "whitelist",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "BPAMOJob",
              "src": "contracts/keeperJobs/curve/BPAMOJob.sol:26"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IAMOMinter)10025": {
              "label": "contract IAMOMinter",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        }
      },
      "contracts/mock/BaseAMOImplem.sol:BaseAMOImplem": {
        "src": "contracts/mock/BaseAMOImplem.sol:11",
        "version": {
          "withMetadata": "94879f440313aac78286f68be0a8bbe1308a74484a60303cf3291c849e2aa3bb",
          "withoutMetadata": "97a0a744e4de866ca49e4b296a0a98fd16cace9c4b48c33462db37fddafccf5d",
          "linkedWithoutMetadata": "97a0a744e4de866ca49e4b296a0a98fd16cace9c4b48c33462db37fddafccf5d"
        },
        "inherit": [
          "contracts/AMOs/BaseAMO.sol:BaseAMO",
          "contracts/interfaces/IAMO.sol:IAMO",
          "contracts/AMOs/BaseAMOStorage.sol:BaseAMOStorage",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address)",
          "report(address,uint256)",
          "revertBytes(bytes)",
          "approveMaxSpend(address,address)",
          "setNetAssets(address,uint256)",
          "setLastBalance(address,uint256)",
          "setAmountsAvailable(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "amoMinter",
              "offset": 2,
              "slot": "0",
              "type": "t_contract(IAMOMinter)10025",
              "contract": "BaseAMOStorage",
              "src": "contracts/AMOs/BaseAMOStorage.sol:23"
            },
            {
              "label": "lastBalances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_contract(IERC20)1782,t_uint256)",
              "contract": "BaseAMOStorage",
              "src": "contracts/AMOs/BaseAMOStorage.sol:29"
            },
            {
              "label": "protocolDebts",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_contract(IERC20)1782,t_uint256)",
              "contract": "BaseAMOStorage",
              "src": "contracts/AMOs/BaseAMOStorage.sol:31"
            },
            {
              "label": "protocolGains",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_contract(IERC20)1782,t_uint256)",
              "contract": "BaseAMOStorage",
              "src": "contracts/AMOs/BaseAMOStorage.sol:33"
            },
            {
              "label": "__gapStorage",
              "offset": 0,
              "slot": "4",
              "type": "t_array(t_uint256)46_storage",
              "contract": "BaseAMOStorage",
              "src": "contracts/AMOs/BaseAMOStorage.sol:35"
            },
            {
              "label": "netAssets",
              "offset": 0,
              "slot": "50",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "BaseAMOImplem",
              "src": "contracts/mock/BaseAMOImplem.sol:12"
            },
            {
              "label": "amountsReallyAvailable",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "BaseAMOImplem",
              "src": "contracts/mock/BaseAMOImplem.sol:13"
            },
            {
              "label": "counter",
              "offset": 0,
              "slot": "52",
              "type": "t_uint256",
              "contract": "BaseAMOImplem",
              "src": "contracts/mock/BaseAMOImplem.sol:14"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)46_storage": {
              "label": "uint256[46]",
              "numberOfBytes": "1472"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IAMOMinter)10025": {
              "label": "contract IAMOMinter",
              "numberOfBytes": "20"
            },
            "t_contract(IERC20)1782": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_contract(IERC20)1782,t_uint256)": {
              "label": "mapping(contract IERC20 => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        }
      },
      "contracts/mock/BaseAMOImplem.sol:BaseAMOImplem2": {
        "src": "contracts/mock/BaseAMOImplem.sol:64",
        "version": {
          "withMetadata": "8c36fff7ef13c1c9db51f5cc4f0ad512a65941bceca18cfc21e7d67b9c4a8bee",
          "withoutMetadata": "c5297464a34d18a5557cdc48ea6ec79ef9fe045311471545c2fafa8f97e69ba5",
          "linkedWithoutMetadata": "c5297464a34d18a5557cdc48ea6ec79ef9fe045311471545c2fafa8f97e69ba5"
        },
        "inherit": [
          "contracts/AMOs/BaseAMO.sol:BaseAMO",
          "contracts/interfaces/IAMO.sol:IAMO",
          "contracts/AMOs/BaseAMOStorage.sol:BaseAMOStorage",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "amoMinter",
              "offset": 2,
              "slot": "0",
              "type": "t_contract(IAMOMinter)10025",
              "contract": "BaseAMOStorage",
              "src": "contracts/AMOs/BaseAMOStorage.sol:23"
            },
            {
              "label": "lastBalances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_contract(IERC20)1782,t_uint256)",
              "contract": "BaseAMOStorage",
              "src": "contracts/AMOs/BaseAMOStorage.sol:29"
            },
            {
              "label": "protocolDebts",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_contract(IERC20)1782,t_uint256)",
              "contract": "BaseAMOStorage",
              "src": "contracts/AMOs/BaseAMOStorage.sol:31"
            },
            {
              "label": "protocolGains",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_contract(IERC20)1782,t_uint256)",
              "contract": "BaseAMOStorage",
              "src": "contracts/AMOs/BaseAMOStorage.sol:33"
            },
            {
              "label": "__gapStorage",
              "offset": 0,
              "slot": "4",
              "type": "t_array(t_uint256)46_storage",
              "contract": "BaseAMOStorage",
              "src": "contracts/AMOs/BaseAMOStorage.sol:35"
            }
          ],
          "types": {
            "t_array(t_uint256)46_storage": {
              "label": "uint256[46]",
              "numberOfBytes": "1472"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IAMOMinter)10025": {
              "label": "contract IAMOMinter",
              "numberOfBytes": "20"
            },
            "t_contract(IERC20)1782": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_contract(IERC20)1782,t_uint256)": {
              "label": "mapping(contract IERC20 => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        }
      },
      "contracts/mock/MockAMO.sol:MockAMO": {
        "src": "contracts/mock/MockAMO.sol:8",
        "version": {
          "withMetadata": "d2b166955049cc418344f47d0d6501e05f1be67ed6fc548d59bd8a7decdeb183",
          "withoutMetadata": "a1823d6e5237204d89c0d6a656120b0908a8582a9ae237b35615690ac997b803",
          "linkedWithoutMetadata": "a1823d6e5237204d89c0d6a656120b0908a8582a9ae237b35615690ac997b803"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "setToken(address)",
          "removeToken(address)",
          "isApproved(address,address)",
          "setAMOMinter(address)",
          "push(address[],uint256[],bytes[])",
          "callerDebt(address,address)",
          "pull(address[],uint256[],bytes[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "tokens",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "MockAMO",
              "src": "contracts/mock/MockAMO.sol:9"
            },
            {
              "label": "amoMinter",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "MockAMO",
              "src": "contracts/mock/MockAMO.sol:10"
            },
            {
              "label": "tokenAmounts",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "MockAMO",
              "src": "contracts/mock/MockAMO.sol:11"
            },
            {
              "label": "counter",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "MockAMO",
              "src": "contracts/mock/MockAMO.sol:12"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        }
      },
      "contracts/mock/MockAMOMinter.sol:MockAMOMinter": {
        "src": "contracts/mock/MockAMOMinter.sol:9",
        "version": {
          "withMetadata": "92ea9fd928e1dd9ecd9539914babadf5f90bae142f1eafa79e1b201f434e10aa",
          "withoutMetadata": "72c190d64fe02e93c027406cf1965adea2b4d4c3086bedcce22905cf044f60de",
          "linkedWithoutMetadata": "72c190d64fe02e93c027406cf1965adea2b4d4c3086bedcce22905cf044f60de"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "setCallerDebt(address,uint256)",
          "setIsApproved(address,bool)",
          "setIsGovernor(address,bool)",
          "pull(address,contract IERC20[],uint256[])",
          "push(address,contract IERC20[],uint256[])",
          "setToken(address,address)",
          "removeToken(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "callerDebt",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "MockAMOMinter",
              "src": "contracts/mock/MockAMOMinter.sol:10"
            },
            {
              "label": "isApproved",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "MockAMOMinter",
              "src": "contracts/mock/MockAMOMinter.sol:11"
            },
            {
              "label": "isGovernor",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "MockAMOMinter",
              "src": "contracts/mock/MockAMOMinter.sol:12"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        }
      },
      "contracts/mock/MockConvexBaseRewardPool.sol:MockConvexBaseRewardPool": {
        "src": "contracts/mock/MockConvexBaseRewardPool.sol:10",
        "version": {
          "withMetadata": "839a076d7ffb2ad102084cf589873a175da635564dd4dc91f6ab8acbb68f49bd",
          "withoutMetadata": "ce3a66ec20e35fbae131d87d2313edf3c3ba6871e58363639264bf761efe92e0",
          "linkedWithoutMetadata": "ce3a66ec20e35fbae131d87d2313edf3c3ba6871e58363639264bf761efe92e0"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,address,address)",
          "deposit(address,uint256)",
          "withdrawAllAndUnwrap()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockConvexBaseRewardPool",
            "src": "contracts/mock/MockConvexBaseRewardPool.sol:17"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "label": "convexBooster",
              "offset": 0,
              "slot": "5",
              "type": "t_contract(MockConvexBooster)14667",
              "contract": "MockConvexBaseRewardPool",
              "src": "contracts/mock/MockConvexBaseRewardPool.sol:12"
            },
            {
              "label": "token",
              "offset": 0,
              "slot": "6",
              "type": "t_contract(IERC20)1782",
              "contract": "MockConvexBaseRewardPool",
              "src": "contracts/mock/MockConvexBaseRewardPool.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_contract(IERC20)1782": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_contract(MockConvexBooster)14667": {
              "label": "contract MockConvexBooster",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        }
      },
      "contracts/mock/MockConvexBooster.sol:MockConvexBooster": {
        "src": "contracts/mock/MockConvexBooster.sol:9",
        "version": {
          "withMetadata": "6aa6c67eda9e3f3c277b9d09472f1a45148602c930b7be34bd56e70d47498ad2",
          "withoutMetadata": "588b130b03196721886535b2e3aa51821f0a7e165a4159a8d0d1b2a6b5cab966",
          "linkedWithoutMetadata": "588b130b03196721886535b2e3aa51821f0a7e165a4159a8d0d1b2a6b5cab966"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "setNewBaseRewardPool(address,uint256)",
          "depositAll(uint256,bool)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "rewardPoolMapping",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint256,t_contract(MockConvexBaseRewardPool)14593)",
              "contract": "MockConvexBooster",
              "src": "contracts/mock/MockConvexBooster.sol:11"
            }
          ],
          "types": {
            "t_contract(MockConvexBaseRewardPool)14593": {
              "label": "contract MockConvexBaseRewardPool",
              "numberOfBytes": "20"
            },
            "t_mapping(t_uint256,t_contract(MockConvexBaseRewardPool)14593)": {
              "label": "mapping(uint256 => contract MockConvexBaseRewardPool)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        }
      },
      "contracts/mock/MockCoreBorrow.sol:MockCoreBorrow": {
        "src": "contracts/mock/MockCoreBorrow.sol:7",
        "version": {
          "withMetadata": "854209d299e6fd33b0e1bdf564593701a1b9efae3435904e192ca07667877acf",
          "withoutMetadata": "7054611817c2c3035f0135ef8c3a3da8d71b43f690c900f107de60d2681f7173",
          "linkedWithoutMetadata": "7054611817c2c3035f0135ef8c3a3da8d71b43f690c900f107de60d2681f7173"
        },
        "inherit": [
          "contracts/interfaces/ICoreBorrow.sol:ICoreBorrow"
        ],
        "libraries": [],
        "methods": [
          "isGovernor(address)",
          "isGovernorOrGuardian(address)",
          "toggleGovernor(address)",
          "toggleGuardian(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "governors",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "MockCoreBorrow",
              "src": "contracts/mock/MockCoreBorrow.sol:8"
            },
            {
              "label": "guardians",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "MockCoreBorrow",
              "src": "contracts/mock/MockCoreBorrow.sol:9"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        }
      },
      "contracts/mock/MockMetaPool.sol:MockMetaPool": {
        "src": "contracts/mock/MockMetaPool.sol:8",
        "version": {
          "withMetadata": "13df784b9792522449b71620a638e6bf2244c9863809ec828d24aaf2ff15fd7d",
          "withoutMetadata": "dff7ec877e2c11f506a4cbb1bdcb9b46e2063de9996074ce35c64a401762e516",
          "linkedWithoutMetadata": "dff7ec877e2c11f506a4cbb1bdcb9b46e2063de9996074ce35c64a401762e516"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,address,address)",
          "calc_withdraw_one_coin(uint256,int128)",
          "add_liquidity(uint256[],uint256)",
          "remove_liquidity_imbalance(uint256[],uint256)",
          "remove_liquidity_one_coin(uint256,int128,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockMetaPool",
            "src": "contracts/mock/MockMetaPool.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "label": "tokenA",
              "offset": 0,
              "slot": "5",
              "type": "t_contract(IERC20)1782",
              "contract": "MockMetaPool",
              "src": "contracts/mock/MockMetaPool.sol:10"
            },
            {
              "label": "tokenB",
              "offset": 0,
              "slot": "6",
              "type": "t_contract(IERC20)1782",
              "contract": "MockMetaPool",
              "src": "contracts/mock/MockMetaPool.sol:11"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_contract(IERC20)1782": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        }
      },
      "contracts/mock/MockTokenPermit.sol:MockTokenPermit": {
        "src": "contracts/mock/MockTokenPermit.sol:7",
        "version": {
          "withMetadata": "0d52ba4c0283d1494d82c6fb35f8fae08344d59bee1fdcbef8fd4da525b021f2",
          "withoutMetadata": "7c8bf1395188136b0f96d21d58ad28da900eddb3c9dded0c906181fd7aea7809",
          "linkedWithoutMetadata": "7c8bf1395188136b0f96d21d58ad28da900eddb3c9dded0c906181fd7aea7809"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:ERC20Permit",
          "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:EIP712",
          "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:IERC20Permit",
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint8)",
          "decimals()",
          "mint(address,uint256)",
          "burn(address,uint256)",
          "burnSelf(uint256,address)",
          "setAllowance(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockTokenPermit",
            "src": "contracts/mock/MockTokenPermit.sol:17"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "label": "_nonces",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_struct(Counter)2619_storage)",
              "contract": "ERC20Permit",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:25"
            },
            {
              "label": "_PERMIT_TYPEHASH_DEPRECATED_SLOT",
              "offset": 0,
              "slot": "6",
              "type": "t_bytes32",
              "contract": "ERC20Permit",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:37",
              "renamedFrom": "_PERMIT_TYPEHASH"
            },
            {
              "label": "_decimal",
              "offset": 0,
              "slot": "7",
              "type": "t_uint8",
              "contract": "MockTokenPermit",
              "src": "contracts/mock/MockTokenPermit.sol:12"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Counter)2619_storage)": {
              "label": "mapping(address => struct Counters.Counter)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Counter)2619_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        }
      }
    }
  ]
}